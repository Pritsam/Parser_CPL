options
        {
        IGNORE_CASE = true;
        STATIC = false;
        }
PARSER_BEGIN(EXceLlenSe)

package de.hft_stuttgart.cpl;
import java.io.FileReader;
import java.io.BufferedReader;
import java.time.Instant;
import java.io.File;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.*;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
public class EXceLlenSe {

    private static Storage dataStorage = new Storage();
    private static Deque<String> queue = new LinkedList<String>();

    private static EXceLlenSe parser = new EXceLlenSe(System.in);

    public static void main(String args[]) throws ParseException {
        File file = new File("src/main/java/de/hft_stuttgart/cpl/input.txt");
        fillCommandQueueFromFile(file);
        System.out.println("*** Given Parsing Commands: " + queue + " ****");
        System.out.println("*** Executing Commands from file " + file.getName() + " ***");

        String givenCommand;
        while ((givenCommand = queue.poll()) != null) {
            System.out.println("*** Parsing  \"" + givenCommand + "\" ****");
            InputStream is = new ByteArrayInputStream( givenCommand.getBytes() );
            parser.ReInit(is);
            parser.ParseOneLine();
            System.out.println();

            System.out.println("*** Displaying the list of variables ***");
            dataStorage.printAllVariables();
            System.out.println();
        }

        System.out.println("*** Finished " + file.getName() + " ***");
        System.out.println();
        System.out.println("*** Displaying the list of variables ***");
        dataStorage.printAllVariables();
    }

    public static void fillCommandQueueFromFile(File file) {
        try {
            BufferedReader reader = new BufferedReader(new FileReader(file));
            String line;
            while ((line = reader.readLine()) != null) {
                queue.offerLast(line);
            }
            reader.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}

PARSER_END(EXceLlenSe)

SKIP:
    {
        " "  |
        "\r" |
        "\t"
    }
TOKEN:
        {
            < NUMBER: (
                ( (<DIGIT>)+ ( "." (<DIGIT>)+ )? )
                | ( "." (<DIGIT>)+ )
                | ( (<DIGIT>)+ ( "." (<DIGIT>)+ )? (["E"]) (["+","-"])? (<DIGIT>)+ )
                | ( "." (<DIGIT>)+ (["E"]) (["+","-"])? (<DIGIT>)+ )
              ) > |
            < DIGIT: ["0"-"9"] > |
            < STRING: "'" ("''" | ~["'"])* "'" > |
            < EQUALS: "=" > |
            < NOT_EQUALS: "<>" > |
            < ADD: "+" > |
            < SUB: "-" > |
            < #SIGNED: (<ADD>|<SUB>)> |
            < EOL: "\n" > |
            < MUL: "*" > |
            < DIV: "/" > |
            < MOD: "%" > |
            < AND: "&" > |
            < TIMESTAMP: "{" (<DIGIT>){4} ("-") (<DIGIT>){2} ("-") (<DIGIT>){2} (" ") (<DIGIT>){2} (":") (<DIGIT>){2} (":") (<DIGIT>){2} "}" > |
            < VAR: ["i", "j", "k", "l", "m", "n"] > |
            < LPAR: "(" > |
            < RPAR: ")" > |
            < LB: "[" > |
            < RB: "]" > |
            < SINGLE_QUOTE: "'" > |
            < FOR: "for" > |
            < FROM: "from" > |
            < TO: "to" > |
            < DO: "do" > |
            < COLUMN: "C" > |
            < ROW: "R" > |
            < FOREND: "end" > |
            < FORMATTED: "FORMATTED" >
        }

    public void ParseOneLine(): {}
    {
        (
            ForLoop()
            |
            LOOKAHEAD(3) CellAssignment()
            |
            LOOKAHEAD(3) InterpretExpression()
        )
        <EOF>
    }

    public Object InterpretExpression(): {Object value = null;}
    {
        (
            LOOKAHEAD(3) value = StringExpression()
            {
                System.out.println("String Expression: " + value);
            }
            |
            LOOKAHEAD(3) value = NumberExpression()
            {
                System.out.println("Number Expression: " + value);
            }
            |
            LOOKAHEAD(3) value = TimestampExpression()
            {
                System.out.println("Timestamp Expression: " + value);
            }
            |
            LOOKAHEAD(3) value = CellValue()
            {
                System.out.println("Cell Value: " + value);
            }
            value = VarValue()
            {
                System.out.println("Variable Value: " + value);
            }
        )*
        {
            System.out.println("Expression Result: " + value);
            return value;
        }
    }

    public Object VarValue(): {Token t;}
    {
        t = <VAR>
        {
            return t.image;
        }
    }

    public Object NumberExpression(): {Object value;}
    {
        (
            value = NumExpr()
        )
        {return value;}
    }

    public Double NumExpr(): {double num1 = 0; double num2 = 0;}
    {
        num1 = term()
        (
            <ADD> num2 = term() {
                System.out.print("+ ");
                num1 += num2;
            }
            |
            <SUB> num2 = term() {
                num1 -= num2;
            }
        )*
        { return num1; }
    }

    double term(): {double num1; double num2;}
    {
        num1 = factor()
        (
            <MUL> num2=factor() {
                System.out.print("* ");
                num1 *= num2;
            }
            |
            <DIV> num2=factor() {
                 num1 /= num2;
            }
            |
            <MOD> num2=factor() {
                num1 %= num2;
            }
        )*
        { return num1; }
    }

    double factor(): {Token t; double a;}
    {
        t = <NUMBER>
            {
                System.out.printf("%s ", t.image);
                return Double.parseDouble(t.toString());
            }
        |
        "(" a = NumExpr() ")"
        { return a; }
    }

    public String ReferenceExpression(): {Token var = null; Object ref = null;}
    {
        (var = <VAR> | ref = NumberExpression() )
        {
            String erg = ref != null ? String.valueOf(ref) : String.valueOf(var.image);
            System.out.println("Reference Expression: " + erg);
            return erg;
        }
    }

    public CellReferenceType CellReference(): {Object columnToken; Object rowToken;}
    {
        <COLUMN> columnToken = ReferenceExpression() <ROW> rowToken = ReferenceExpression()
        {
            String column = String.valueOf(columnToken);
            String row = String.valueOf(rowToken);
            return new CellReferenceType(column, row);
        }
    }

    public Object CellValue(): {Value value = null;Object columnToken; Object rowToken;}
    {
        <COLUMN> columnToken = ReferenceExpression() <ROW> rowToken = ReferenceExpression()
        {
            String column = String.valueOf(columnToken);
            String row = String.valueOf(rowToken);
            CellReferenceType ref = new CellReferenceType(column, row);
            if (ref.isParseAble()) {
                return dataStorage.getValue(ref.getReference()).get().getValue();
            } else {
                return ref;
            }
        }
    }

    public void CellAssignment(): {Token format = null; Object value; CellReferenceType reference;}
    {
        reference = CellReference() <EQUALS> value = InterpretExpression() (<FORMATTED> format = <STRING>)?
        {
            if (value instanceof CellReferenceType) {
                System.out.println("CellRefType: ref:" + reference + " val: " + value);
            } else {
                System.out.println("Value try parsing");
                if (reference.isParseAble()) {
                    System.out.println("Value can parsing");
                    if (format != null && !format.image.isEmpty()) {
                        String text = String.format(String.valueOf(value), format.image);
                        dataStorage.setValue(reference.getReference(), new Value(text));
                        System.out.println(reference.getReference() + "= value:" + text);
                    } else {
                        dataStorage.setValue(reference.getReference(), new Value(value));
                        System.out.println(reference.getReference() + "= value:" + value);
                    }
                }
            }
        }
    }

    public void ForLoop(): {Token var; Object start; Object end; Token doToken;}
    {
        <FOR> var = <VAR> <FROM> start = NumberExpression() <TO> end = NumberExpression() doToken = <DO> CellAssignment() <FOREND>
        {
            double startValue = Double.parseDouble(String.valueOf(start));
            double endValue = Double.parseDouble(String.valueOf(end));

            StringBuilder commandBuilder = new StringBuilder();
            Token moveToken = doToken;
            while (!moveToken.image.equals("end")) {
                commandBuilder.append(moveToken.image).append(" ");
                moveToken = moveToken.next;
            }
            System.out.println("commandBuilder:" + commandBuilder);
            String command = commandBuilder.substring(2, commandBuilder.toString().length()-1);
            System.out.println("command:" + command);

            for (double i = endValue; i >= startValue; i--) {

                String replacedAssignment = command.replace(var.image, String.valueOf(i));
                queue.offerFirst(replacedAssignment);
                System.out.println("-- Add for command \"" + replacedAssignment + "\" --");

            }
        }
    }

    public Object StringExpression(): {Token t; Token op; Token compare; StringBuilder sb = new StringBuilder(); Object value;}
    {
        t = <STRING>
        {
            // Extract the text value from the matched token
            String textValue = t.image.substring(1, t.image.length() - 1).replace("''", "'");
            sb.append(textValue);
            value = sb.toString();
        }
        (
            (op = <EQUALS> | op = <NOT_EQUALS>) compare = <STRING>
                {
                    String firstTextValue = t.image.substring(1, t.image.length() - 1).replace("''", "'");
                    String secondTextValue = compare.image.substring(1, t.image.length() - 1).replace("''", "'");

                    if (op.image.equals("=")) {
                        return value = firstTextValue.equals(secondTextValue);
                    } else if (op.image.equals("<>")) {
                        return value = !firstTextValue.equals(secondTextValue);
                    }
                }
            |
            (
                <AND> t = <STRING>
                {
                    // Extract the text value from the matched token
                    String additionalTextValue = t.image.substring(1, t.image.length() - 1).replace("''", "'");
                    sb.append(additionalTextValue);
                    // Convert the StringBuilder to a String
                    value = sb.toString();
                }
            )*
        )
        {
            return value;
        }
    }

    public Instant TimestampExpression(): {Token t; Token t2; Instant i = Instant.MIN; int seconds = 0;}
        {
            t = <TIMESTAMP>
            {
                // take out the value of timestamp from the matched token
                String timestampValue = t.image;
                // Modify the timestamp value to include "T" and "Z"
                String modifiedTimestampValue = timestampValue.replace("{", "").replace("}", "").replace(" ", "T") + "Z";
                try {
                    // Parse the modified timestamp into an Instant
                    i = Instant.parse(modifiedTimestampValue);
                    System.out.println(i);
                } catch (DateTimeParseException e) {
                    // Handle the exception if the timestamp is not in the expected format
                    throw new ParseException("Invalid timestamp format: " + timestampValue);
                }
            }
            (
                <ADD> t2 = <NUMBER>
                {
                    seconds = Integer.parseInt(t2.image);
                    i = i.plusSeconds(seconds);
                    System.out.println("Timestamp new Plus " + i);
                }
                |
                <SUB> t2 = <NUMBER>
                {
                    seconds = Integer.parseInt(t2.image);
                    i = i.minusSeconds(seconds);
                    System.out.println("Timestamp new Minus " + i);
                }
            )*
            {
                return i;
            }
        }
